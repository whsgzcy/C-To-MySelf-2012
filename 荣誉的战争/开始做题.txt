1.输入两个数，输出他们的乘积。
#include <stdio.h>

int main()
{
	int x, y, z;

	printf("请输入x和y的值：\n");

	scanf("%d%d", & x, & y );  //通过知道输入数

	printf("计算乘积：%d * %d\n",x, y); //输出，知道是怎么输出的。

	z = x * y;

	printf("输出乘积：%d\n", z);

	return 0;

}

2.最简单的字符串加密。

#include <stdio.h>
#include <string.h>

int main()
{
	char str[30];
	int k = 9, n, i;

	printf("请输入一行英文字母自动进行加密\n\n");

	gets(str);

	n = strlen(str);

	for(i = 0; i < n - 1; i ++)
	
	{
		if((* (str + i) >= 'a' && * (str + i) <= 'z') || (* (str + i) >= 'A' && * (str + i) <= 'Z'))

			* (str + i) = * (str + i) + k;
	}

	printf("输出加密后的字符\n\n");

	printf("%s\n", str);

	return 0;
}

之上的字符串，应用的时候怎么会有害怕的感觉。自己要注意去应用。

3.测量各个变量所占字节数。如：int ,float, double.等。

#include <stdio.h>

int main()
{
	printf("输出各种变量的所占的字节\n");

	printf("int 所占字节数为：%d\n\n", sizeof(int) );

	printf("long 所占字节数为：%d\n\n", sizeof(long) );

	printf("char 所占字节数为：%d\n\n", sizeof(char) );

	printf("short 所占字节数为：%d\n\n", sizeof(short) );

	printf("double 所占字节数为：%d\n\n", sizeof(double) );

	printf("float 所占字节数为：%d\n\n", sizeof(float) );

	//这里就注意sizeof()函数就是来测量一个变量的所占的字节。很好用的
}

4.计算1+1+2+1+2+3+1+2+3+4+1+2+3+4+5+……+1+……+n;

#include<stdio.h>

int main()
{
	int i, n;
	int sum = 0, a = 0;//两个变量一开始是要赋值的，这样才能进行后面的相加。

	scanf("%d", & n);

	for(i = 1; i <= n; i ++)
	{
		a = a + i;
		sum = sum + a; //这里就是一个循环，用 a 来控制着。控制着前面的和
这样就能直接相加了。
	}

	printf("%d\n", sum);

	return 0;
}

5. 从一个三行四列的整型二维数组中查找第一个出现的负数。(用指针做)

#include <stdio.h>

int main()
{
	int a[3][4];
	int i, j;

	printf("请输入一个三行四列的整数\n");

	for(i = 0; i < 3; i ++)
	{
		for(j = 0; j < 4; j ++)

			scanf("%d", * (a + i) + j);
	}

	for(i = 0; i < 3; i ++)
	{
		for(j = 0; j < 4; j ++)
		{
			if(* (* (a + i) + j) < 0)

				break;
		}

		if(* (* (a + i) + j) < 0)

			break;


	}

	printf("第一个负数为：");

	printf("%d\n", * (* (a + i) + j));
}

6.求5 * 5 矩阵对角线的和

#include <stdio.h>

int main()
{
	int a[5][5], i, j;
	int sum = 0;

	for(i = 0; i < 5; i ++)

		for(j = 0; j < 5; j ++)

			scanf("%d", * (a + i) + j);

	for(i = 0; i < 5; i ++)
	{
		for(j = 0; j < 5; j ++)
		{
			if(i % 4 == j % 4 || i + j == 4)//这个控制条件很重要。

				sum = sum + * (* (a + i ) + j);
		}

	}

	printf("%d\n", sum);
}

7.九乘九口诀表

#include <stdio.h>

int main()
{
	int i, j ;

	for(i = 1; i < 10; i ++)
	{
		for(j = 1; j <= i; j ++)

			printf("%d*%d=%-5d", i, j, i * j); // 这里要有一个要注意的时候，就是那个间距的问题
		//我在编程的时候输出的这一条我没有按照规矩来，就是因为考虑到这里输出的间距问题.

		printf("\n");
	}
}

8.实现矩阵转化。

#include <stdio.h>

int main()
{
	int a[3][4], b[4][3];
	int i, j;

	printf("现在是一个3 * 4 的矩阵\n");

	for(i = 0; i < 3; i ++)

		for(j = 0; j < 4; j ++)// 实现了输入。
			
			scanf("%d", * (a + i) + j);

	for(i = 0; i < 3; i ++)
	{
		for(j = 0; j < 4; j ++) //转化

			* (* (b + j) + i) =  * (* (a + i) + j);

	}

	printf("转化成了 4 * 3 的矩阵\n"); // 最后输出。

	for(i = 0; i < 4; i ++)
	{
		for(j = 0; j < 3; j ++)

			printf("%-5d", * (* (b + i) + j)); // 这里输出很重要，不要弄错了顺序。是 4 * 3；

		printf("\n");

	}
	printf("\n");
}

9.在二维数组中，求得最大值和最小值。

#include <stdio.h>

int max(int a[3][3] /*形参*/) // 数组的形参，就这么表示。
{
	int i, j;
	int max = * (* a);

	for(i = 0; i < 3; i ++)
	{
		for(j = 1; j < 3; j ++)

			if(max < * (* (a + i)) + j)

				max = * (* (a + i)) + j;
	}

	return max;
}

int min(int a[3][3])
{
	int i, j;
	int min = * (* a);

	for(i = 0; i < 3; i ++)
	{
		for(j = 1; j < 3; j ++)

			if(min > * (* (a + i)) + j)

				min = * (* (a + i)) + j;
	}

	return min;
}

int main()
{
	int i, j;
	int a[3][3];
	int m = 0, n = 0;

	for(i = 0; i < 3; i ++)

		for(j = 0; j < 3; j ++)

			scanf("%d", * (a + i) + j);

	m = max(a/*实参*/);
	n = min(a);  // 这里数组的函数调用要注意，我这里一开始的时候有点昏。其实一维二维数组都一样。
	//只要把数组名当做实参传入形参。

	printf("max = %d, min = %d\n", m, n);
}//我用的是调用函数做的。

10.素数的求法。

#include <stdio.h>
#include <math.h>

int main()
{
	int k;
	int i, n, j = 0;
	double m;

	scanf("%d", & k);

	for(n = 2; n <= k; n ++)
	{
		m = sqrt (n);

		for(i = 2; i < m; i ++)

			if(n % i == 0)   // 这就是根据那个素数只能被1 和 自身整除外都不能整除了。所以有这个判断。

				break;

		if(i > m)  //这一步很重要。来判断是不是素数。
		{
			j ++;

			printf("%-8d", n);  //这里只是来控制输出，没有实际意义。

			if(j % 6 == 0)

				printf("\n");
		}
	}

	printf("\n");

}


11.最简单的一维数组排序。（没什么好解释的）

#include <stdio.h>
int main()
{
	int a[10];
	int i, j, t;

	for(i = 0; i < 10; i ++)

		scanf("%d", a + i);

	printf("一排好的顺序为：\n");

	for(i = 0; i < 10; i ++)
	{
		for(j = i + 1; j < 10; j ++)

			if(* (a + i) > * (a + j))
			{
				t = * (a + i);
				* (a + i) = * (a + j);
				* (a + j) = t;
			}

		printf("%-4d", * (a + i));
	}

	printf("\n");

	return 0;
}

12.进制转化，我用的是栈来处理的。经典哦

#include <stdio.h>
#define maxsize 100

typedef int SElemtype;

typedef struct
{
	SElemtype data[maxsize];
	int top;
}sqstack;

void Initstack (sqstack * S)
{
	S ->top = -1;
}

int IsEmpty(sqstack * S)
{
	return S ->top == -1;
}

int IsFull(sqstack * S)
{
	return S ->top == maxsize - 1;
}

void push(sqstack * S, SElemtype x)
{
	if(IsFull(S))
	{
		printf("此栈已满，不能再堆：\n");
		exit (1);
	}

	S ->data [++ S ->top ] = x;
}

int pop(sqstack * S)
{
	if(IsEmpty(S))
	{
		printf("此栈以空，没有值可以退栈：\n");
		exit (1);
	}

	return S ->data [S ->top --];
}

void conversionA()
{
	sqstack S;
	SElemtype e;
	int i;

	Initstack (& S);

	printf("请输入一个需要转化的数值：");

	scanf("%d", & e);

	while (e)
	{
		push(& S, e % 2);
		e = e / 2;
	}

	printf("\n\n转化为二进制的结果为：");

	while(!IsEmpty(& S))
	{
		i = pop(& S);

		printf("%d", i);
	}

	printf("\n\n");
}

void conversionB()
{
	sqstack S;
	SElemtype e;
	int i;

	Initstack (& S);

	printf("请输入一个需要转化的数值：");

	scanf("%d", & e);

	while (e)
	{
		push(& S, e % 8);
		e = e / 8;
	}

	printf("\n\n转化为八进制的结果为：");

	while(!IsEmpty(& S))
	{
		i = pop(& S);

		printf("%d", i);
	}

	printf("\n\n");
}

void conversionC()
{
	sqstack S;
	SElemtype e;
	int i;

	Initstack (& S);

	printf("请输入一个需要转化的数值：");

	scanf("%d", & e);

	while (e)
	{
		push(& S, e % 16);
		e = e / 16;
	}

	printf("\n\n转化为十六进制的结果为：");

	while(!IsEmpty(& S))
	{
		i = pop(& S);

		printf("%d", i);
	}

	printf("\n\n");
}

void main()
{
	int x, M;

	while (x) // 通过这个while语句，可以来实现循环，这样不至于运行一次就没了。
	{
		printf("\n");

		printf("                                      栈和队列的应用\n");

		printf("                    *****************************************\n");

		printf("                    **    1、10-2进制整数转换              **\n");

		printf("                    **    2、10-8进制整数转换              **\n"); 
		
		printf("                    **    3、10-16进制整数转换             **\n");
		
		printf("                    **    0 、退出                         **\n");
		
		printf("                    *****************************************\n");
		
		printf("请输入你需要操作的步骤：");
		
		scanf("%d", & x);
		
		switch (x)
		{
		
		case 1: conversionA();
			
			break;
		
		case 2: conversionB();
			
			break;
		
		case 3: conversionC();
			
			break;
		
		case 0: 
			
			printf("您是否要退出程序? 1.是 2.否\n"); // 这里这个判断可以自己选择。
			
			scanf("%d",&M); //其实在case之后是可以自己写的，但是我们把自己写的程序用调用函数调用了。
			
			if(M==1)
			{
				printf("您已退出程序了!\n"); //一般短的程序自己写在下面。
				exit(0);
			}

			else 

				x = 2;
		}
	}
}


13. 判断是否为回文函数。

#include <stdio.h>
#include <string.h>

void main()
{
	char str[50];
	int i = 0, j;

	printf("请输入一串代码进行判断\n");

	gets(str);

	j = strlen (str) - 1;

	while (* (str + i) == ' ') // 这两步是来排除万一前面和后面有空格。一旦有而且前面和后面的空格不等，那么没有这两步操作的话直接来判断就会影响操作。 

		i ++;

	while (* (str + j) == ' ')

		j --;

	for(; j >=  i; i ++, j --)
	{
		if( * (str + i) != * (str + j))

			break;
	}

	if(j <= i)

		printf("\n\n此函数为 是 回文函数。\n\n");

	else 

		printf("\n\n此函数 不是 回文函数。\n\n");

}

14. 求数组前 n 个元素之和。

#include <stdio.h>

int fum(int a[10], int n)
{
	int sum;

	if(n == 0)
		
		sum = 0; //调用的时候一定要自己明白怎么调用的，一步一步的来看，这里我一开始
	//写成了 sum = * (a + n) ; 其实多加了。自己每一次看到时候一定要停下看他怎么调用。一步一步想。
	
	else
		
		sum = fum(a, n - 1) + * (a + (n -1));  //最简单的递归。用递归一下子解决问题。 

	return sum;
}

void main()
{
	int a[10], sum ;
	int i, n;

	for(i = 0; i < 10; i ++)
	{
		scanf("%d", a + i);
	}

	printf("\n这个数组有十个元素，你需要求第几个元素前的和：\n");

	scanf("%d", & n);

	sum = fum (a, n);

	printf("\n前 %d 个数的和为：%d\n\n",n, sum);
}

15.元素查找（加入了判断是否符合你要查找的元素。）

#include <stdio.h>

void main()
{
	int x;
	int a[] = {98, 64, 38, 38, 69, 346, 64, 38, 49, 64, 91}, b[5] = {0};
	int i, j, n;

	printf("已经展示所有数，任你查找\n\n");

	for(i = 0; i < 11; i ++)

		printf("%-5d", * (a + i));

	printf("\n\n请输入你要查找的元素：");
	
	scanf("%d", &x);

	for(i = 0, j = 0; i < 11; i ++)
	{
		if(x == * (a + i))
		{
			* (b + j) = (i + 1);  // 用这个数组b的目的就是为了下面可以判断是否你要你输入的数在这里面就有。
			j ++;
		}

		n = j; //这里就是控制了数组b在最后输出的时候不会多输出，一开始我对b进行了赋值。
	}

	if(* b == 0)

		printf("\n\n没有符合你查找的元素，谢谢！");

	else 
	{
		printf("\n\n你要查找的元素 %d 在", x);

		for(j = 0; j < n; j ++)

			printf("第 %d 号位", * (b + j));
	}

	printf("\n\n");

}

16.读入的是一个整数，可以转化成实数输出。

#include <stdio.h>

int main()
{
	int i;
	double j;

	printf("请输入一个整数： ");

	scanf("%d", & i);

	j = i;  //这里可以转化哦

	printf("\n输出一个实数 %lf\n", j);

	return 0;
}

17.替换字符串里面的字符。（首先输入字符，再输入你需要更改的字符，最后输入你要改成什么的字符。）

#include <stdio.h>

void main()
{
	char s[20], s1[20], s2[20];
	int i, j ;
	int m, n;

	printf("请输入一串字符：");

	gets(s);

	printf("\n请输入你需要替换的字符： ");

	gets(s1);

	printf("\n请输入你需要替换成什么字符： ");

	gets(s2);

	j = strlen(s);
	n = strlen(s1);

	for(i = 0; i < j ; i ++)
	{
		for(m = 0; m < n; m ++)
		{
			if(* (s + i) == * (s1 + m))

				* (s + i) = * (s2 + m);//两个for循环很重要。我要实现的是将字符串s里的每一个字符都拿出来与需要替换的字符数组里的每一个字符比较，看看s串里的每一个与这个替换串里有没有相同的，相同就替换。
		}
	}

	printf("\n");

	for(i = 0; i < j; i ++)

		printf("%c", * (s + i));

	printf("\n");
}

18.字符行排版

#include <stdio.h>
#include <string.h>

int sp(char st[100])
{
	int i, n = 0;

	for(i = 0; * (st + i) != '\0'; i ++)
	{
		if(* (st + i) == ' ')

			n ++;
	}

	return n;
}

int num(char st[100])
{
	int j = 0, m = 0;
	int i;

	for(i = 0; * (st + i) != '\0'; i ++)

		if(* (st + i ) == ' ')

			j = 0;

		else if(j == 0)
		{
			j = 1;
			m ++;
		}

	return m;
} 

void main()
{
	char st[100], st1[100];
	int i, j = 0, k = 0;
	int n, m ;  //拿来呈递上面调用函数返回来的值。

	printf("请任意输入一行字符串，我们将会为你排版。\n\n");

	gets(st);

	n = sp(st) / (num(st) - 1);

	for(i = 0, m = 0; * (st + i) != '\0'; i ++)  // 一切功能全在这下面。
	{
		if(* (st + i) == ' ') 

			k = 1;

		else if(k == 1) // 最主要的就是这里的判断。
		{
			k = 0;

			while(m != (n + 1))
			{
				* (st1 + j + m) = ' ';
				m ++;
			}

			* (st1 + j + n) = * (st + i);

			j = j + n + 1;

			m = 0;
		}

		else 
		{
			* (st1 + j ) = * (st + i);
			
			j = j + 1;
		}
	}
	k = j;

	printf("\n\n输出已经排版好的顺序：\n\n");

	for(j = 0; j < k; j ++)
	{
		printf("%c", * (st1 + j));
	}

	printf("\n\n");
}

19. 很简陋的通讯录哦。用的是结构体解决。

#include <stdio.h>

struct addr  // 这里用的是结构体。一般这种就用结构体，很快。
{
	char name[20];
	char add[30];
	char phone[20];
};

int main()
{
	struct addr stu[3]; // 这里是定义一个结构体数组。可以处理多对数据
	int i;

	for(i = 0; i < 3; i ++)
	{
		printf("\n请输入第 %d 个人名字，地址，号码：\n", i + 1);

		scanf("%s%s%s", stu[i].name , stu[i].add , stu[i].phone ); // 这里就是结构体输入。

	}

	printf("\n\n");
	printf("下面是你输入的结果将显示给你：\n");

	for(i = 0; i < 3; i ++)
	{
		printf("\n第 %d 个人名字，地址，号码：\n", i + 1);
		printf("姓名： %s.\n", stu[i].name);
		printf("地址： %s.\n", stu[i].add);   // 这里就是结构体的输出。
		printf("电话： %s.\n", stu[i].phone);
	}
}

20. 有‘结构’统计学生的成绩管理。有姓名，学号，各科成绩。

#include <stdio.h>

struct student
{
	int num;
	char name[10];
	int score[5];
};

int main()
{
	struct student stu[3];
	int i, j;

	for(i = 0; i < 3; i ++)
	{
		printf("\n请输入第 %d 个人的学号，姓名，五门课的成绩：\n", i + 1);

		scanf("%d%s", & stu[i].num , stu[i].name );

		for(j = 0; j < 5; j ++)

			scanf("%d", & stu[i].score [j]); // 这里是控制数组成绩的输入。
	}

	printf("\n\n");

	for(i = 0; i < 3; i ++)
	{
		printf("\n\n第 %d 个人的学号，姓名，五门课的成绩：\n", i + 1);
		printf("学号 ：%d\n", stu[i].num );
		printf("姓名 ：%s\n", stu[i].name );
		printf("成绩 ：" );  // 但是这里一定要注意，这个输出。只是一个形式在这里。

		for(j = 0; j < 5; j ++) //同样这里输出成绩，要用另一个循环进行输出

			printf("%4d", stu[i].score [j]);
	}

	printf("\n\n");

}

21.删除字符串中的特定字符。

#include <stdio.h>

int main()
{
	char str[50];
	int i;
	char n;

	gets(str);

	printf("\n\n请输入一个你需要查找的字符：");

	scanf("%c", & n);

	printf("\n\n");

	for(i = 0; str[i] != '\0'; i ++)
	{
		if(* (str + i) == n)

			continue; // 并没有删除，只是覆盖了，只是找到那里没有输出。造假了。

		else

			printf("%c", * (str + i));
	}

	printf("\n\n");
}

求解符号方程

#include <stdio.h>

void main()
{
	long a, b, i, j, k;

	for(i = 10; i < 100; i ++)
	{
		for(j = 0; j < 10; j ++)

			for(k = 0; k < 10; k ++)
			{
				a = 8 * 100 + j * 10 + k; //此题目纯属数学题，但是用程序写出来，这里用的是三层循环，把判断加进去，判断全写在一个if里，我已开始是想把这些判断作为条件。但是这里一步到位。这样做很简洁。
				b = 97 * 100 + j * 10 + k;

				if((b == i * a + 1) && (b >= 1000) && b <= 100000 && 8 * i < 100 && 9 * i > 100)

					printf("\n %ld = %ld * %ld + %ld\n", 97 * 100 + j * 10 + k, 800 + j * 10 + k, i, b % i);
			}
	}
}

22.编写出调用函数num（int m, int k, int a[]）将大于 m 的 k 个素数，保存到数组a[]中，最后调用这个函数。

#include <stdio.h>
#include <math.h>

void num(int m, int k, int a[])
{
	int i, q, j, n;

	for(i = 0; i < k; i ++)
	{
		for(j = m + 1; j < 10000; j ++)
		{
			q = sqrt(j);

			for(n = 2; n <= q; n ++)   //  我现在通过做题，现在好多题都是通过循环加判断，再通过调用函数。
			{
				if(j % n == 0)

					break;
			}

			if(n > q)

				break;
		}

		* (a + i) = j;  
		m = j;
	}
}

void main()
{
	int a[100];

	int k, m, i; // 还有我们在正式比赛时，万一定义多了变量，一定要注意这个注释，问题，我现在虽然没有注释，以后一定要注释。

	printf("请输入你一个数和你要取几位素数：");

	scanf("%d%d", & m, & k);

	num(m, k, a);

	printf("\n\n输出一下结果：\n\n");

	for(i = 0; i< k; i ++)
	
		printf("%-5d", * (a + i));

	printf("\n\n");
}

23.30个人围成一圈，有15个坏的，15个好的，现在30个人围成一圈，报数，报到九的退出。出去15个。怎么站到最后15个坏的全部出去。有的时候用循环链表，队列，栈，一定要注意可能很相似。但又很大区别。一定要选好具体方法。

#include <stdio.h>
#include <malloc.h>

struct num
{
	int n;

	struct num *next;
};

int i;

struct num *creat()
{
	struct num * head;
	struct num * p1, * p2;

	head = NULL;
	i = 0;

	p1 = p2 = (struct num * ) malloc (sizeof (struct num));

    p1 ->n = 1;

	while (i < 30)
	{
		i = i + 1;

		if(i == 1)

			head = p1;

		else 

			p2 ->next = p1;

		p2 = p1;

		p1 = ((struct num * ) malloc (sizeof (struct num)));

		p1 ->n = 1;
	}

	p2 ->next = head;  // 循环链表的处理方式。
 
	return head;
}

void fun(struct num * head)
{
	struct num * p;
	int j;

	p = head;
	i = 0;
	
	for(j = 0; j < 10000;)
	{
		if(p ->n == 0)
		{
			p = p ->next;  // 因为这时候 0 被踢出去，不参与数了。但是他这个数在，我们认为他踢出了。跳过他就行了。
			j = j;
		}
		
		else
		{
			j = j + 1;

			if(j % 9 == 0)
			{
				p ->n = 0;
				
				i = i + 1;
			}
			
			else
			{
				p = p ->next;
			}
		}

		if(i == 15)

			break;
	}

	//head = p;

	return head;
}

void print(struct num * head)
{
	struct num * p;

	i = 0;
	p = head;

	while (i < 30)
	{
		i = i + 1;

		printf("%-5d", p ->n);

		p = p ->next;
	}
}

void main()
{
	struct num * head; 

	head = creat();

	fun(head);

	print(head);

	printf("\n\n");
}

24.十个小孩围成一圈，老师给第一个小孩10块，老师给第二个小孩2，第三个小孩8块，第四个小22块，第五个小孩16块，第六个小孩4块，第七个小孩10块，第八个小孩6块，第九个小孩14块，第十个小孩20块，然后所有的小孩同时将手中的糖分一半给右边的小孩。糖块为奇数的小孩可以向老师要一个糖。经过这样几次之后，小孩手里的糖全是相等的，问，现在小孩手中的糖是多少。（我用的是循环链表。这里记住是同时。分一半给右边的小孩，所以在阅读题目的时候一定要好好理解。）


#include <stdio.h>
#include <malloc.h>

struct stu
{
	int num;

	struct stu * next;
};

int n;

struct stu * creat()
{
	struct stu * head;
	struct stu * p1, * p2;

	head = NULL;
	n = 1;

	p1 = p2 = (struct stu *) malloc (sizeof (struct stu));

	printf("现在请给分别十个小朋友分糖,以 0 结束。：\n\n");

	scanf("%d", & p1 ->num);

	while(n <= 10)
	{
		if(n == 1)

			head = p1;

		else

			p2 ->next = p1;

		p2 = p1;

		p1 = (struct stu * ) malloc (sizeof (struct stu));

		scanf("%d", & p1 ->num);

		n = n + 1;
	}

	p2 ->next = head;

	return head;
}

void fun(struct stu * head)
{
	struct stu * p;
	int i;
	int a[10];

	p = head;
 
	for(i = 0; i < 12 ; i ++)
	{
		for(i = 0; i < 10; i ++)
		{
			if((p ->num) % 2 != 0)
			{
				p ->num = ((p ->num) + 1);
				p = p ->next;
			}

			else

				p = p ->next;
				
		}

		for(i = 0; i < 10; i++)
		{
			a[i] = (p ->num) / 2;
			p = p ->next;

			printf("%3d", * (a + i));
		}

		printf("\n");

		for(i = 0; i < 10; i ++)
		{
			p ->next ->num = ((p ->next ->num) / 2 ) + * (a + i) ;
			p = p ->next;
		}

		for(i = 0; i < 10; i ++)
		{
			if((p ->num) % 2 != 0)
			{
				p ->num = ((p ->num) + 1);
				p = p ->next;
			}

			else

				p = p ->next;
				
		}

		for(i = 0; i < 10; i ++)
		{
			a[i] = p ->num;
			p = p ->next;
		}

		for(i = 1; i < 10; i ++)
		{
			if(* (a + 0) != * (a + i))

				break;
		}

		if(i == 10)

			i = 11;

	}

	return head;
}

void print(struct stu * head)
{
	struct stu * p;

	p = head;
	n = 0;

	while (n < 10)
	{
		n = n + 1;

		printf(" %-3d ", p ->num);

		p = p ->next;
	}
}

void main()
{
	struct stu * head;

	head = creat();

	fun(head);

	print(head);
}









